Write a blog on the difference between document and window objects 

Document Object:

The document object is an essential component of the Document Object Model.
(DOM). It represents the entire HTML document and provides a structured 
representation of the content, allowing developers to manipulate and interact
with it dynamically. Some key aspects of the document object include

1.DOM Manipulation:
The document object is primarily used for accessing and modifying the content
within an HTML document. Developers can traverse the DOM tree, selecting and
updating elements, attributes, and content dynamically.

//Example: Changing the text content of an element
document.getElementById('exampleElement').textContent = 'New Text';

2. Element Selection:
Developers can use various methods provided by the document object to select 
HTML elements based on their IDs, classes, tags, etc.

// Example: Selecting an element by ID
var element = document.getElementById('exampleElement');

3. Events and Event Handling:
The document object facilitates the handling of events such as clicks, 
keypresses, and form submissions.

// Example: Adding an event listener to a button
document.getElementById('myButton').addEventListener('click', function() {
    // Code to execute on button click
});

Window Object:

On the other hand, the window object represents the browser window or tab 
containing the document. It serves as a global object and encompasses a wide 
range of properties and methods. Key features of the window object include:

1.Global Scope:
The window object is the global object in a browser environment. Variables and
functions declared without the var, let, or const keyword become properties 
of the window object.

// Example: Creating a global variable
globalVariable = 'I am a global variable';
console.log(window.globalVariable); // Outputs: "I am a global variable"

2.Browser Information:
The window object provides information about the browser, including 
dimensions, location, and navigation history.

// Example: Retrieving the current URL
var currentURL = window.location.href;

3.Timers and Intervals:
Functions such as setTimeout and setInterval are part of the window object, 
enabling the execution of code after a specified delay or at regular intervals

// Example: Using setTimeout
window.setTimeout(function() {
    // Code to execute after a delay
}, 1000); // Delay in milliseconds

The document and window objects are closely related and share some 
functionalities, they serve distinct purposes in web development. 
The document object focuses on the structure and content of the HTML document,
allowing developers to manipulate its elements dynamically. Meanwhile, 
the window object provides a global context, offering information about 
the browser and enabling control over the browser window itself. 
Understanding the nuances of these objects is crucial for effective 
client-side scripting and creating dynamic and interactive web applications.

